type: edu
custom_name: stage4
files:
- name: src/contacts/Main.java
  visible: true
  text: |
    package contacts;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/ContactsTest.java
  visible: false
  text: "import contacts.Main;\nimport org.hyperskill.hstest.stage.StageTest;\nimport\
    \ org.hyperskill.hstest.testcase.CheckResult;\nimport org.hyperskill.hstest.testcase.TestCase;\n\
    \nimport java.util.List;\nimport java.util.function.Function;\n\n\nclass TestClue\
    \ {\n\n    Function<String, CheckResult> callback;\n\n    TestClue(Function<String,\
    \ CheckResult> callback) {\n        this.callback = callback;\n    }\n}\n\n\n\
    public class ContactsTest extends StageTest<TestClue> {\n\n    public ContactsTest()\
    \ {\n        super(Main.class);\n    }\n    private CheckResult splitActionsFeedback(int\
    \ actualSize, int needSize) {\n        if (actualSize < needSize) {\n        \
    \    return CheckResult.wrong(String.format(\"This test should contain at least\
    \ %d actions, but you have only %d. \" +\n                            \"You should\
    \ separate your actions with an empty line.\",\n                    needSize,\n\
    \                    actualSize));\n        } else {\n            return null;\n\
    \        }\n    }\n    \n    @Override\n    public List<TestCase<TestClue>> generate()\
    \ {\n        return List.of (\n            new TestCase<TestClue>()\n        \
    \        .setInput(\"exit\")\n                .setAttach(new TestClue(output ->\
    \ {\n                    output = output.strip().toLowerCase();\n            \
    \        if (!output.contains(\"enter action\")) {\n                        return\
    \ new CheckResult(false,\n                            \"No \\\"Enter action\\\"\
    \ substring found in the output\");\n                    }\n                 \
    \   return CheckResult.correct();\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"count\\n\" +\n            \
    \        \"exit\")\n                .setAttach(new TestClue(output -> {\n    \
    \                output = output.strip().toLowerCase();\n                    if\
    \ (!output.contains(\"0 records\")) {\n                        return new CheckResult(false,\n\
    \                            \"No \\\"0 records\\\" substring found in the output.\
    \ \" +\n                                    \"If you already have the database,\
    \ try to delete it.\");\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"person\\\
    n\" +\n                        \"John\\n\" +\n                        \"Smith\\\
    n\" +\n                        \"\\n\" +\n                        \"\\n\" +\n\
    \                        \"123 456 789\\n\" +\n                    \"count\\n\"\
    \ +\n                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    output = output.strip().toLowerCase();\n         \
    \           if (output.contains(\"0 records\")) {\n                        return\
    \ new CheckResult(false,\n                            \"Can't add the person\"\
    );\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"person\\\
    n\" +\n                        \"John\\n\" +\n                        \"Smith\\\
    n\" +\n                        \"\\n\" +\n                        \"\\n\" +\n\
    \                        \"123 456 789\\n\" +\n                    \"list\\n\"\
    \ +\n                    \"1\\n\" +\n                    \"menu\\n\" +\n     \
    \               \"exit\")\n                .setAttach(new TestClue(output -> {\n\
    \                    String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\\
    s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 3);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Name: John\")\n                                && infoBlock.contains(\"Surname:\
    \ Smith\")\n                                && infoBlock.contains(\"Birth date:\
    \ [no data]\")\n                                && infoBlock.contains(\"Gender:\
    \ [no data]\")\n                                && infoBlock.contains(\"Number:\
    \ 123 456 789\")\n                                && infoBlock.contains(\"Time\
    \ created:\")\n                                && infoBlock.contains(\"Time last\
    \ edit:\")) {\n                            return CheckResult.correct();\n   \
    \                     }\n                    }\n                    return new\
    \ CheckResult(false,\n                            \"Something wrong with printing\
    \ user info\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"Pizza Shop\\n\" +\n\
    \                        \"Wall St. 1\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"list\\n\" +\n                   \
    \ \"1\\n\" +\n                    \"menu\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, 3);\n              \
    \      if (feedback != null) return feedback;\n\n                    for (String\
    \ infoBlock : blocks) {\n                        if (infoBlock.contains(\"Organization\
    \ name: Pizza Shop\")\n                                && infoBlock.contains(\"\
    Address: Wall St. 1\")\n                                && infoBlock.contains(\"\
    Number: +0 (123) 456-789-9999\")\n                                && infoBlock.contains(\"\
    Time created:\")\n                                && infoBlock.contains(\"Time\
    \ last edit:\")) {\n                            return CheckResult.correct();\n\
    \                        }\n                    }\n                    return\
    \ new CheckResult(false,\n                            \"Something wrong with printing\
    \ organization info\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"person\\n\" +\n                        \"John\\n\" +\n          \
    \              \"Smith\\n\" +\n                        \"\\n\" +\n           \
    \             \"\\n\" +\n                        \"123 456 789\\n\" +\n      \
    \              \"list\\n\" +\n                    \"1\\n\" +\n               \
    \     \"edit\\n\" +\n                        \"gender\\n\" +\n               \
    \         \"M\\n\" +\n                    \"menu\\n\" +\n                    \"\
    list\\n\" +\n                    \"1\\n\" +\n                    \"menu\\n\" +\n\
    \                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    String[] blocks = output.strip().split(\"(\\\\s*\\\
    \\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 6);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Name: John\")\n                                && infoBlock.contains(\"Surname:\
    \ Smith\")\n                                && infoBlock.contains(\"Birth date:\
    \ [no data]\")\n                                && infoBlock.contains(\"Gender:\
    \ M\")\n                                && infoBlock.contains(\"Number: 123 456\
    \ 789\")\n                                && infoBlock.contains(\"Time created:\"\
    )\n                                && infoBlock.contains(\"Time last edit:\"))\
    \ {\n                            return CheckResult.correct();\n             \
    \           }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Editing person is not working\");\n           \
    \     })),\n\n            new TestCase<TestClue>()\n                .setInput(\n\
    \                    \"add\\n\" +\n                        \"organization\\n\"\
    \ +\n                        \"Pizza Shop\\n\" +\n                        \"Wall\
    \ St. 1\\n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n     \
    \               \"list\\n\" +\n                    \"1\\n\" +\n              \
    \      \"edit\\n\" +\n                        \"address\\n\" +\n             \
    \           \"Wall St 2\\n\" +\n                    \"menu\\n\" +\n          \
    \          \"list\\n\" +\n                    \"1\\n\" +\n                   \
    \ \"menu\\n\" +\n                    \"exit\")\n                .setAttach(new\
    \ TestClue(output -> {\n                    String[] blocks = output.strip().split(\"\
    (\\\\s*\\\\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 6);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Organization name: Pizza Shop\")\n                                && infoBlock.contains(\"\
    Address: Wall St 2\")\n                                && infoBlock.contains(\"\
    Number: +0 (123) 456-789-9999\")\n                                && infoBlock.contains(\"\
    Time created:\")\n                                && infoBlock.contains(\"Time\
    \ last edit:\")) {\n                            return CheckResult.correct();\n\
    \                        }\n                    }\n                    return\
    \ new CheckResult(false,\n                            \"Editing organization is\
    \ not working\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"Pizza Shop\\n\" +\n\
    \                        \"Wall St. 1\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"add\\n\" +\n                    \
    \    \"person\\n\" +\n                        \"John\\n\" +\n                \
    \        \"Smith\\n\" +\n                        \"\\n\" +\n                 \
    \       \"\\n\" +\n                        \"123 456 789\\n\" +\n            \
    \        \"add\\n\" +\n                        \"organization\\n\" +\n       \
    \                 \"PizzaNuts\\n\" +\n                        \"Wall St. 6\\n\"\
    \ +\n                        \"+0 (123) 456-789-9999\\n\" +\n                \
    \    \"search\\n\" +\n                        \"pizz\\n\" +\n                \
    \    \"1\\n\" +\n                    \"menu\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, 4);\n              \
    \      if (feedback != null) return feedback;\n    \n                    \n  \
    \                  for (String infoBlock : blocks) {\n                       \
    \ if (infoBlock.contains(\"Pizza Shop\")\n                                && infoBlock.contains(\"\
    PizzaNuts\")\n                                && !infoBlock.contains(\"John\"\
    )) {\n                            return CheckResult.correct();\n            \
    \            }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Search is not working\");\n                })),\n\
    \n            new TestCase<TestClue>()\n                .setInput(\n         \
    \           \"add\\n\" +\n                        \"organization\\n\" +\n    \
    \                    \"Pizza Shop\\n\" +\n                        \"Wall St. 1\\\
    n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n              \
    \      \"add\\n\" +\n                        \"person\\n\" +\n               \
    \         \"John\\n\" +\n                        \"Smith\\n\" +\n            \
    \            \"\\n\" +\n                        \"\\n\" +\n                  \
    \      \"123 456 789\\n\" +\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"PizzaNuts\\n\" +\n\
    \                        \"Wall St. 6\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"search\\n\" +\n                 \
    \       \"s\\n\" +\n                    \"1\\n\" +\n                    \"menu\\\
    n\" +\n                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    String[] blocks = output.strip().split(\"(\\\\s*\\\
    \\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 4);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Pizza Shop\")\n                                && infoBlock.contains(\"John Smith\"\
    )\n                                && infoBlock.contains(\"PizzaNuts\")) {\n \
    \                           return CheckResult.correct();\n                  \
    \      }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Search is not working\");\n                })),\n\
    \n        new TestCase<TestClue>()\n            .setInput(\n                \"\
    add\\n\" +\n                    \"organization\\n\" +\n                    \"\
    Pizza Shop\\n\" +\n                    \"Wall St. 1\\n\" +\n                 \
    \   \"+0 (123) 456-789-9999\\n\" +\n                \"add\\n\" +\n           \
    \         \"person\\n\" +\n                    \"John\\n\" +\n               \
    \     \"Smith\\n\" +\n                    \"\\n\" +\n                    \"\\\
    n\" +\n                    \"123 456 789\\n\" +\n                \"add\\n\" +\n\
    \                    \"organization\\n\" +\n                    \"PizzaNuts\\\
    n\" +\n                    \"Wall St. 6\\n\" +\n                    \"+0 (123)\
    \ 456-781-9999\\n\" +\n                \"search\\n\" +\n                    \"\
    789\\n\" +\n                \"1\\n\" +\n                \"menu\\n\" +\n      \
    \          \"exit\")\n            .setAttach(new TestClue(output -> {\n      \
    \          String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\"\
    );\n                var feedback = splitActionsFeedback(blocks.length, 4);\n \
    \               if (feedback != null) return feedback;\n\n                for\
    \ (String infoBlock : blocks) {\n                    if (infoBlock.contains(\"\
    Pizza Shop\")\n                            && infoBlock.contains(\"John Smith\"\
    )\n                            && !infoBlock.contains(\"PizzaNuts\")) {\n    \
    \                    return CheckResult.correct();\n\n                    }\n\
    \                }\n                return new CheckResult(false,\n          \
    \              \"Search by phone number is not working\");\n            }))\n\
    \        );\n    }\n\n    @Override\n    public CheckResult check(String reply,\
    \ TestClue clue) {\n        try {\n            return clue.callback.apply(reply);\n\
    \        }\n        catch (Exception ex) {\n            return new CheckResult(false,\
    \ \"Can't check the answer\");\n        }\n    }\n}\n"
  learner_created: false
- name: src/contacts/Contact.java
  visible: true
  text: |
    package contacts;

    import java.time.LocalDateTime;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class Contact {

        final boolean isPerson;
        private String phoneNumber;
        LocalDateTime timeCreated;

        public void setTimeCreated(LocalDateTime timeCreated) {
            this.timeCreated = timeCreated.withNano(0).withSecond(0);
        }

        public void setTimeEdit(LocalDateTime timeEdit) {
            this.timeEdit = timeEdit.withNano(0).withSecond(0);
        }

        public LocalDateTime getTimeEdit() {
            return timeEdit;
        }

        public LocalDateTime getTimeCreated() {
            return timeCreated;
        }

        LocalDateTime timeEdit;

        public Contact(String phoneNumber, boolean isPerson) {
            if (checkNumber(phoneNumber)) {
                this.phoneNumber = phoneNumber;
            } else {
                this.phoneNumber = "";
            }
            this.isPerson = isPerson;
        }

        public void setPhoneNumber(String phoneNumber) {
            if (checkNumber(phoneNumber)) {
                this.phoneNumber = phoneNumber;
            } else {
                this.phoneNumber = "";
            }
        }

        public String getPhoneNumber() {
            return phoneNumber;
        }

        public boolean hasNumber() {
            return phoneNumber.length() > 0;
        }

        private boolean checkNumber(String number) {
            Pattern pattern = Pattern.compile("\\+?\\d?[\\d \\-a-zA-Z]*(\\([\\da-zA-Z]+\\))?[\\d \\-a-zA-Z]*");
            Matcher matcher = pattern.matcher(number);
            String[] arr = number.split("[ \\-]");
            boolean l = true;
            if (arr.length > 1) {
                for (String s : arr) {
                    if (s.length() < 2) {
                        l = false;
                        break;
                    }
                }
            }
            return matcher.matches() && l;
        }

        public void info() {

        }

    }
  learner_created: true
- name: src/contacts/PhoneBook.java
  visible: true
  text: |
    package contacts;

    import java.util.ArrayList;
    import java.util.List;

    public class PhoneBook {
        public List<Contact> contacts = new ArrayList<>();

        public void addContact(Contact contact) {
            contacts.add(contact);
        }
    }
  learner_created: true
- name: src/contacts/Organization.java
  visible: true
  text: |
    package contacts;

    public class Organization extends Contact{

        public String organizationName;
        public String address;

        public Organization(String organizationName, String address, String phoneNumber) {
            super(phoneNumber, false);
            this.organizationName = organizationName;
            this.address = address;
        }

        public void setOrganizationName(String organizationName) {
            this.organizationName = organizationName;
        }

        public void setAddress(String address) {
            this.address = address;
        }

        public String getOrganizationName() {
            return organizationName;
        }

        public String getAddress() {
            return address;
        }

        @Override
        public String toString() {
            return organizationName;
        }

        @Override
        public void info() {
            System.out.println("Organization name: " + organizationName);
            System.out.println("Address: " + address);
            if (hasNumber()) {
                System.out.println("Number: " + getPhoneNumber());
            } else {
                System.out.println("Number: [no data]");
            }
            if (timeCreated != null) {
                System.out.println("Time created: " + timeCreated);
            } else {
                System.out.println("Time created: [no data]");
            }
            if (timeEdit!= null) {
                System.out.println("Time last edit: " + timeCreated);
            } else {
                System.out.println("Time last edit: [no data]");
            }
        }
    }
  learner_created: true
- name: src/contacts/Person.java
  visible: true
  text: |
    package contacts;

    import java.time.LocalDate;

    public class Person extends Contact{

        public String name;
        public String surname;
        public LocalDate birthDate;
        public String gender;

        public void setBirthDate(LocalDate birthDate) {
            this.birthDate = birthDate;
        }

        public void setGender(String gender) {
            this.gender = gender;
        }

        public LocalDate getBirthDate() {
            return birthDate;
        }

        public String getGender() {
            return gender;
        }

        Person(String name, String surname, String phoneNumber) {
            super(phoneNumber, true);
            this.name = name;
            this.surname = surname;
        }

        public void setName(String name) {
            this.name = name;
        }

        public void setSurname(String surname) {
            this.surname = surname;
        }

        public String getName() {
            return name;
        }

        public String getSurname() {
            return surname;
        }

        @Override
        public String toString() {
            return name + " " + surname;
        }

        @Override
        public void info() {
            System.out.println("Name: " + name);
            System.out.println("Surname: " + surname);
            if (birthDate != null) {
                System.out.println("Birth date: " + birthDate);
            } else {
                System.out.println("Birth date: [no data]");
            }
            if (gender != null) {
                System.out.println("Gender: " + gender);
            } else {
                System.out.println("Gender: [no data]");
            }
            if (hasNumber()) {
                System.out.println("Number: " + getPhoneNumber());
            } else {
                System.out.println("Number: [no data]");
            }
            if (timeCreated != null) {
                System.out.println("Time created: " + timeCreated);
            } else {
                System.out.println("Time created: [no data]");
            }
            if (timeEdit!= null) {
                System.out.println("Time last edit: " + timeCreated);
            } else {
                System.out.println("Time last edit: [no data]");
            }
        }
    }
  learner_created: true
- name: src/contacts/Menu.java
  visible: true
  text: |
    package contacts;

    import java.time.LocalDate;
    import java.time.LocalDateTime;
    import java.time.format.DateTimeParseException;
    import java.util.Scanner;

    public class Menu {

        PhoneBook phoneBook = new PhoneBook();
        final static Scanner scanner = new Scanner(System.in);

        public void process() {
            while (true) {
                System.out.println("Enter action (add, remove, edit, count, info, exit):");
                String answer = scanner.nextLine();

                switch (answer) {
                    case "add":
                        add();
                        break;
                    case "remove":
                        remove();
                        break;
                    case "edit":
                        edit();
                        break;
                    case "count":
                        count();
                        break;
                    case "info":
                        info();
                        break;
                    case "exit":
                        return;
                }
                System.out.println();
            }
        }

        public void add() {
            System.out.println("Enter the type (person, organization):");
            String answer = scanner.nextLine();
            switch (answer) {
                case "person":
                    System.out.println("Enter the name:");
                    String name = scanner.nextLine();
                    System.out.println("Enter the surname:");
                    String surname = scanner.nextLine();
                    System.out.println("Enter the birth date:");
                    LocalDate date = null;
                    try {
                        date = LocalDate.parse(scanner.nextLine());
                    } catch (DateTimeParseException e) {
                        System.out.println("Bad birth date!");
                    }
                    System.out.println("Enter the gender (M, F):");
                    String gender = scanner.nextLine();
                    if (!gender.equals("M") && !gender.equals("F")) {
                        System.out.println("Bad gender!");
                        gender = null;
                    }
                    System.out.println("Enter the number:");
                    String number = scanner.nextLine();
                    Person person = new Person(name, surname, number);
                    if (!person.hasNumber()) {
                        System.out.println("Wrong number format!");
                    }
                    if (date != null) {
                        person.setBirthDate(date);
                    }
                    if (gender != null) {
                        person.setGender(gender);
                    }
                    System.out.println("The record added.");
                    person.setTimeCreated(LocalDateTime.now().withNano(0));
                    phoneBook.addContact(person);
                    break;

                case "organization":
                    System.out.println("Enter the organization name:");
                    String organizationName = scanner.nextLine();
                    System.out.println("Enter the address:");
                    String address = scanner.nextLine();
                    System.out.println("Enter the number:");
                    String numberPhone = scanner.nextLine();
                    Organization organization = new Organization(organizationName, address, numberPhone);
                    if (!organization.hasNumber()) {
                        System.out.println("Wrong number format!");
                    }
                    System.out.println("The record added.");
                    organization.setTimeCreated(LocalDateTime.now().withNano(0));
                    phoneBook.addContact(organization);
                    break;
            }

        }

        public void remove() {
            if (phoneBook.contacts.size() == 0) {
                System.out.println("No records to remove!");
            } else {
                list();
                System.out.println("Enter index to show info: ");
                int choice = Integer.parseInt(scanner.nextLine());
                phoneBook.contacts.remove(choice - 1);
                System.out.println("The record removed!");
            }
        }

        public void list() {
            for (int i = 0; i < phoneBook.contacts.size(); i++) {
                System.out.println((i + 1) + ". " + phoneBook.contacts.get(i));
            }
        }

        public void edit() {
            if (phoneBook.contacts.size() == 0) {
                System.out.println("No records to edit!");
            } else {
                list();
                System.out.println("Enter index to show info: ");
                int choice = Integer.parseInt(scanner.nextLine());
                Contact contact = phoneBook.contacts.get(choice - 1);
                if (contact.isPerson) {
                    Person p = (Person) contact;
                    System.out.println("Select a field (name, surname, birth, gender, number):");
                    String c = scanner.nextLine();
                    p.setTimeEdit(LocalDateTime.now().withNano(0));
                    switch (c) {
                        case "name":
                            System.out.println("Enter name:");
                            String name = scanner.nextLine();
                            p.setName(name);
                            break;
                        case "surname":
                            System.out.println("Enter surname:");
                            String surname = scanner.nextLine();
                            p.setSurname(surname);
                            break;
                        case "number":
                            System.out.println("Enter number:");
                            String number = scanner.nextLine();
                            p.setPhoneNumber(number);
                            break;
                        case "birth":
                            System.out.println("Enter birth:");
                            LocalDate date = LocalDate.parse(scanner.nextLine());
                            p.setBirthDate(date);
                            break;
                        case "gender":
                            System.out.println("Enter gender:");
                            String gender = scanner.nextLine();
                            p.setGender(gender);
                            break;
                    }
                } else {
                    Organization o = (Organization) contact;
                    System.out.println("Select a field (name, address, number):");
                    String c = scanner.nextLine();
                    o.setTimeEdit(LocalDateTime.now().withNano(0));
                    switch (c) {
                        case "name":
                            System.out.println("Enter name:");
                            String name = scanner.nextLine();
                            o.setOrganizationName(name);
                            break;
                        case "address":
                            System.out.println("Enter the address:");
                            String address = scanner.nextLine();
                            o.setAddress(address);
                            break;
                        case "number":
                            System.out.println("Enter number:");
                            String number = scanner.nextLine();
                            o.setPhoneNumber(number);
                            break;
                    }
                }
                System.out.println("The record updated!");
            }
        }

        public void count() {
            System.out.println("The Phone Book has " + phoneBook.contacts.size() + " records.");
        }

        public void info() {
            if (phoneBook.contacts.size() == 0) {
                System.out.println("No records!");
            } else {
                list();
                System.out.println("Enter index to show info: ");
                int choice = Integer.parseInt(scanner.nextLine());
                phoneBook.contacts.get(choice - 1).info();
            }
        }


    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/43/stages/231/implement#comment
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/43/stages/231/implement">JetBrains
    Academy</a>
  time: Wed, 18 Nov 2020 12:43:17 UTC
record: -1
